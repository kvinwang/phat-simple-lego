(()=>{"use strict";var __webpack_exports__={};const pink=globalThis.pink,$=pink.SCALE;function doEval(script,input,context){return eval(script)}!function(){function t(t,n,e){switch(n.cmd){case"call":return function(t,n){const e=t.config;if(!(n instanceof Uint8Array))throw new Error("call contract input must be a Uint8Array");return pink.invokeContract({...e,input:n})}(n,e);case"eval":return function(t,n,e){const r=t.config;if("string"!=typeof r)throw new Error("Trying to eval non-string");return doEval(r,n,e)}(n,e,t);case"fetch":return function(t,n){let e;e="string"==typeof t.config?{url:t.config}:t.config;let r={};"string"!=typeof n&&"object"!=typeof n||(r="string"==typeof n&&n.length>0?{url:n}:n),r={...e,...r};const{url:o,method:c,headers:i,body:s,returnTextBody:u}=r;if("string"!=typeof o)throw new Error("invalid url");const l=pink.httpRequest({url:o,method:c,headers:i,body:s,returnTextBody:u}),a=l.statusCode;if(!r.allowNon2xx&&(a<200||a>=300))throw new Error(`http error: ${a}`);return l}(n,e);case"scale":return function(t,n,e){const{subcmd:r,type:o}=t.config;if("encode"===r){const t=function(t,n){return"number"==typeof t?$.createEncoderForTypeId(t,n):$.createTupleEncoder(t,n)}(o,e);return $.encode(n,t)}if("decode"===r){const t=function(t,n){return"number"==typeof t?$.createDecoderForTypeId(t,n):$.createTupleDecoder(t,n)}(o,e);return $.decode(n,t)}throw new Error(`unknown scale subcmd: ${r}`)}(n,e,t.typeRegistry);case"log":return e;default:throw new Error(`unknown action: ${n.cmd}`)}}const n=scriptArgs[0],e=scriptArgs[1];console.log(`actions: ${n}`),console.log(`types: ${e}`),function(n,e){const r=$.parseTypes(e);console.log(`typeRegistry: ${JSON.stringify(r,null,2)}`);let o="",c={typeRegistry:r};for(let e=0;e<n.length;e++){const r=n[e];void 0!==r.input&&(o=r.input);const i=r.name??r.cmd;console.log(`running action [${i}], ${r.cmd}(input=${o})`);const s=t(c,r,o);o=s,r.name?.length>0&&(c[i]={output:s})}}(JSON.parse(n),e)}()})();