#!/bin/sh
set -e

if [ -z "$WITNESS_DIST_DIR" ]; then
  export WITNESS_DIST_DIR=$(pwd)/.witness/dist
fi

install_toolchain() {
  echo "::group::Installing Rust"
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  echo "::endgroup::"
  PATH="$HOME/.cargo/bin:$PATH"
  echo "::group::Installing cargo-contract"
  cargo install cargo-contract --version=^3
  echo "::endgroup::"
}

install() {
    echo "Installing $1 to $2"
    cp $1 $2
}

build_contract() {
    echo "Building contract in $PWD"
    rm -rf .witness && mkdir -p .witness
    RUST_LOG=error cargo contract build --release --output-json | tee .witness/output.json
    cd .witness
    jq -r '.metadata_result.dest_metadata' output.json | xargs -I % cp % metadata.json
    jq -r '.dest_wasm, .metadata_result.dest_bundle' output.json > contract_files.txt
    echo metadata.json >> contract_files.txt
    contract_name=$(jq -r '.contract.name' metadata.json)
    jq -r '.source.hash' metadata.json > contract_hash
    cat contract_files.txt | zip -@ -j $contract_name.zip
    echo "::notice title=witness.contract.$contract_name.packageHash::0x$(sha256sum $contract_name.zip | cut -d ' ' -f 1)"
    echo "::notice title=witness.contract.$contract_name.metadataHash::0x$(sha256sum metadata.json | cut -d ' ' -f 1)"
    echo "::notice title=witness.contract.$contract_name.wasmCodeHash::$(cat contract_hash)"
    mkdir -p $WITNESS_DIST_DIR
    install $contract_name.zip $WITNESS_DIST_DIR/
}

if [ "$1" = "-i" ]; then
  install_toolchain
fi

for contract in contracts/*; do
  echo "::group::Building $contract"
  (cd $contract && build_contract)
  echo "::endgroup::"
done
