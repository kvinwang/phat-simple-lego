DevPhase {
  api: ApiPromise {
    __phantom: <BN: 0>,
    _call: {
      babeApi: [Object],
      blockBuilder: [Object],
      authorityDiscoveryApi: [Object],
      grandpaApi: [Object],
      nominationPoolsApi: [Object],
      offchainWorkerApi: [Object],
      transactionPaymentApi: [Object],
      transactionPaymentCallApi: [Object],
      sessionKeys: [Object],
      accountNonceApi: [Object],
      taggedTransactionQueue: [Object],
      metadata: [Object],
      core: [Object]
    },
    _consts: {
      assets: [Object],
      system: [Object],
      utility: [Object],
      babe: [Object],
      timestamp: [Object],
      indices: [Object],
      balances: [Object],
      transactionPayment: [Object],
      electionProviderMultiPhase: [Object],
      staking: [Object],
      fastUnstake: [Object],
      voterList: [Object],
      nominationPools: [Object],
      democracy: [Object],
      elections: [Object],
      grandpa: [Object],
      treasury: [Object],
      imOnline: [Object],
      identity: [Object],
      society: [Object],
      recovery: [Object],
      vesting: [Object],
      scheduler: [Object],
      proxy: [Object],
      multisig: [Object],
      bounties: [Object],
      tips: [Object],
      lottery: [Object],
      childBounties: [Object],
      phalaRegistry: [Object],
      phalaStakePoolv2: [Object],
      phalaVault: [Object],
      phalaWrappedBalances: [Object],
      uniques: [Object],
      rmrkCore: [Object]
    },
    _errors: {
      assets: [Object],
      system: [Object],
      utility: [Object],
      babe: [Object],
      indices: [Object],
      balances: [Object],
      electionProviderMultiPhase: [Object],
      staking: [Object],
      fastUnstake: [Object],
      voterList: [Object],
      nominationPools: [Object],
      session: [Object],
      democracy: [Object],
      council: [Object],
      technicalCommittee: [Object],
      elections: [Object],
      technicalMembership: [Object],
      grandpa: [Object],
      treasury: [Object],
      sudo: [Object],
      imOnline: [Object],
      identity: [Object],
      society: [Object],
      recovery: [Object],
      vesting: [Object],
      scheduler: [Object],
      preimage: [Object],
      proxy: [Object],
      multisig: [Object],
      bounties: [Object],
      tips: [Object],
      lottery: [Object],
      childBounties: [Object],
      phalaMq: [Object],
      phalaRegistry: [Object],
      phalaComputation: [Object],
      phalaStakePoolv2: [Object],
      phalaStakePool: {},
      phalaVault: [Object],
      phalaWrappedBalances: [Object],
      phalaBasePool: [Object],
      phalaPhatContracts: [Object],
      phalaPhatTokenomic: [Object],
      phatRollupAnchor: [Object],
      phatOracle: [Object],
      uniques: [Object],
      rmrkCore: [Object]
    },
    _events: {
      assets: [Object],
      system: [Object],
      utility: [Object],
      indices: [Object],
      balances: [Object],
      transactionPayment: [Object],
      electionProviderMultiPhase: [Object],
      staking: [Object],
      fastUnstake: [Object],
      voterList: [Object],
      nominationPools: [Object],
      session: [Object],
      democracy: [Object],
      council: [Object],
      technicalCommittee: [Object],
      elections: [Object],
      technicalMembership: [Object],
      grandpa: [Object],
      treasury: [Object],
      sudo: [Object],
      imOnline: [Object],
      offences: [Object],
      identity: [Object],
      society: [Object],
      recovery: [Object],
      vesting: [Object],
      scheduler: [Object],
      preimage: [Object],
      proxy: [Object],
      multisig: [Object],
      bounties: [Object],
      tips: [Object],
      lottery: [Object],
      childBounties: [Object],
      phalaRegistry: [Object],
      phalaComputation: [Object],
      phalaStakePoolv2: [Object],
      phalaStakePool: {},
      phalaVault: [Object],
      phalaWrappedBalances: [Object],
      phalaBasePool: [Object],
      phalaPhatContracts: [Object],
      phalaPhatTokenomic: [Object],
      phatRollupAnchor: [Object],
      phatOracle: [Object],
      uniques: [Object],
      rmrkCore: [Object]
    },
    _extrinsicType: 4,
    _isReady: true,
    _query: {
      substrate: [Object],
      assets: [Object],
      system: [Object],
      babe: [Object],
      timestamp: [Object],
      authorship: [Object],
      indices: [Object],
      balances: [Object],
      transactionPayment: [Object],
      electionProviderMultiPhase: [Object],
      staking: [Object],
      fastUnstake: [Object],
      voterList: [Object],
      nominationPools: [Object],
      session: [Object],
      democracy: [Object],
      council: [Object],
      technicalCommittee: [Object],
      elections: [Object],
      technicalMembership: [Object],
      grandpa: [Object],
      treasury: [Object],
      sudo: [Object],
      imOnline: [Object],
      authorityDiscovery: [Object],
      offences: [Object],
      randomnessCollectiveFlip: [Object],
      identity: [Object],
      society: [Object],
      recovery: [Object],
      vesting: [Object],
      scheduler: [Object],
      preimage: [Object],
      proxy: [Object],
      multisig: [Object],
      bounties: [Object],
      tips: [Object],
      lottery: [Object],
      childBounties: [Object],
      phalaMq: [Object],
      phalaRegistry: [Object],
      phalaComputation: [Object],
      phalaStakePoolv2: [Object],
      phalaStakePool: [Object],
      phalaVault: [Object],
      phalaWrappedBalances: [Object],
      phalaBasePool: [Object],
      phalaPhatContracts: [Object],
      phalaPhatTokenomic: [Object],
      phatRollupAnchor: [Object],
      phatOracle: [Object],
      parachainInfo: [Object],
      parachainSystem: [Object],
      uniques: [Object]
    },
    _runtimeMap: {
      '0x8398d155281f9609': 'Account',
      '0xc12bd136eef97845': 'AccountApi',
      '0x95e6783d74341833': 'Author',
      '0xbc17490254c02307': 'AuthorApi',
      '0x8a04b5a63af7d909': 'Babe',
      '0xcbca25e39f142387': 'BabeApi',
      '0xa033d72afbb2bb68': 'ChainHead',
      '0xacc3a260fedc2771': 'ChainHeadApi',
      '0x5e5d95dd5752b4f9': 'Chain',
      '0x5335501e44642b97': 'ChainApi',
      '0xb88d15a236feb9ad': 'Childstate',
      '0xc68543f35fdad90b': 'ChildstateApi',
      '0x7b97c8a7b748f4e1': 'Grandpa',
      '0xed99c5acb25eedf5': 'GrandpaApi',
      '0x41283fdcec032c4a': 'Offchain',
      '0x5512926935ede1ac': 'OffchainApi',
      '0x9f6ff40ab27c3eee': 'Payment',
      '0xb26fc86261762775': 'PaymentApi',
      '0x41788ec56ecc2161': 'Pha',
      '0x6951d108315cedbe': 'PhaApi',
      '0xa442ff44ab783a5b': 'State',
      '0x204a5f6d8aadc1ec': 'StateApi',
      '0xefd2306f1dfa1ea3': 'Subscribe',
      '0x00278804fc9238be': 'SubscribeApi',
      '0x25f900aae4441670': 'Sync',
      '0xe90a984f569168a5': 'SyncApi',
      '0xb286347245c485af': 'System',
      '0xed828651eacdf868': 'SystemApi',
      '0x489625c40be6e99c': 'Transaction',
      '0xc25bf7ae257bb907': 'TransactionApi',
      '0xf81c1caf3cf5d36b': 'Unsubscribe',
      '0x4ce289de854dea6b': 'UnsubscribeApi'
    },
    _rx: {
      call: [Object],
      consts: [Object],
      query: [Object],
      tx: [Function],
      callAt: [Function (anonymous)],
      queryAt: [Function (anonymous)],
      registry: TypeRegistry {},
      hasSubscriptions: true,
      rpc: [Function],
      queryMulti: [Function (anonymous)],
      signer: undefined,
      runtimeVersion: [Type [Map]],
      extrinsicType: 4,
      genesisHash: [Type [Uint8Array]],
      derive: [Object]
    },
    _rxDecorateMethod: [Function: _rxDecorateMethod],
    _decorateMethod: [Function: toPromiseMethod],
    _options: {
      provider: WsProvider {},
      noInitWarn: true,
      types: [Object],
      signedExtensions: [Object]
    },
    _type: 'promise',
    _rpcCore: RpcCore {
      mapping: [Map],
      sections: [Array],
      provider: WsProvider {},
      author: [Object],
      babe: [Object],
      beefy: [Object],
      chain: [Object],
      childstate: [Object],
      contracts: [Object],
      dev: [Object],
      engine: [Object],
      net: [Object],
      web3: [Object],
      eth: [Object],
      grandpa: [Object],
      mmr: [Object],
      offchain: [Object],
      payment: [Object],
      rpc: [Object],
      state: [Object],
      syncstate: [Object],
      system: [Object]
    },
    _isConnected: BehaviorSubject {
      closed: false,
      currentObservers: [],
      observers: [],
      isStopped: false,
      hasError: false,
      thrownError: null,
      _value: true
    },
    _rpc: [Function (anonymous)] {
      author: [Object],
      babe: [Object],
      beefy: {},
      chain: [Object],
      childstate: [Object],
      contracts: {},
      dev: {},
      engine: {},
      net: {},
      web3: {},
      eth: {},
      grandpa: [Object],
      mmr: {},
      offchain: [Object],
      payment: [Object],
      rpc: [Object],
      state: [Object],
      syncstate: [Object],
      system: [Object]
    },
    _queryMulti: [Function (anonymous)],
    _runtimeChain: [String (Text): 'Phala Development'] {
      registry: TypeRegistry {},
      initialU8aLength: 0
    },
    _runtimeVersion: Type(8) [Map] {
      'specName' => [Text],
      'implName' => [Text],
      'authoringVersion' => <BN: 1>,
      'specVersion' => <BN: 1>,
      'implVersion' => <BN: 0>,
      'apis' => [Type],
      'transactionVersion' => <BN: 1>,
      'stateVersion' => <BN: 0>,
      initialU8aLength: 0,
      registry: TypeRegistry {}
    },
    _genesisHash: Type(32) [Uint8Array] [
      64,
      229,
      0,
      239,
      7,
      67,
      169,
      201,
      228,
      169,
      203,
      162,
      100,
      176,
      233,
      102,
      190,
      167,
      98,
      160,
      50,
      103,
      158,
      111,
      32,
      90,
      212,
      129,
      224,
      119,
      34,
      59,
      registry: TypeRegistry {},
      initialU8aLength: 32
    ],
    _runtimeMetadata: Metadata(2) [Map] {
      'magicNumber' => <BN: 6174656d>,
      'metadata' => [Type],
      initialU8aLength: 372354,
      registry: TypeRegistry {}
    },
    _extrinsics: [Function (anonymous)] {
      assets: [Getter],
      system: [Getter],
      utility: [Getter],
      babe: [Getter],
      timestamp: [Getter],
      indices: [Getter],
      balances: [Getter],
      electionProviderMultiPhase: [Getter],
      staking: [Getter],
      fastUnstake: [Getter],
      voterList: [Getter],
      nominationPools: [Getter],
      session: [Getter],
      democracy: [Getter],
      council: [Getter],
      technicalCommittee: [Getter],
      elections: [Getter],
      technicalMembership: [Getter],
      grandpa: [Getter],
      treasury: [Getter],
      sudo: [Getter],
      imOnline: [Getter],
      identity: [Getter],
      society: [Getter],
      recovery: [Getter],
      vesting: [Getter],
      scheduler: [Getter],
      preimage: [Getter],
      proxy: [Getter],
      multisig: [Getter],
      bounties: [Getter],
      tips: [Getter],
      lottery: [Getter],
      childBounties: [Getter],
      phalaMq: [Getter],
      phalaRegistry: [Getter],
      phalaComputation: [Getter],
      phalaStakePoolv2: [Getter],
      phalaVault: [Getter],
      phalaWrappedBalances: [Getter],
      phalaBasePool: [Getter],
      phalaPhatContracts: [Getter],
      phalaPhatTokenomic: [Getter],
      phatRollupAnchor: [Getter],
      phatOracle: [Getter],
      parachainInfo: [Getter],
      parachainSystem: [Getter],
      rmrkCore: [Getter]
    },
    _derive: {
      accounts: [Getter],
      alliance: [Getter],
      bagsList: [Getter],
      balances: [Getter],
      bounties: [Getter],
      chain: [Getter],
      council: [Getter],
      democracy: [Getter],
      elections: [Getter],
      imOnline: [Getter],
      session: [Getter],
      society: [Getter],
      staking: [Getter],
      technicalCommittee: [Getter],
      treasury: [Getter],
      tx: [Getter]
    }
  },
  network: 'local',
  networkConfig: {
    nodeUrl: 'ws://localhost:39944',
    nodeApiOptions: { types: [Object], signedExtensions: [Object] },
    workerUrl: 'http://localhost:38000'
  },
  blockTime: 500,
  workerUrl: 'http://localhost:38000',
  accounts: {
    alice: {
      address: [Getter],
      addressRaw: [Getter],
      isLocked: [Getter],
      meta: [Getter],
      publicKey: [Getter],
      type: [Getter],
      decodePkcs8: [Function: decodePkcs8],
      decryptMessage: [Function: decryptMessage],
      derive: [Function: derive],
      encodePkcs8: [Function: encodePkcs8],
      encryptMessage: [Function: encryptMessage],
      lock: [Function: lock],
      setMeta: [Function: setMeta],
      sign: [Function: sign],
      toJson: [Function: toJson],
      unlock: [Function: unlock],
      verify: [Function: verify],
      vrfSign: [Function: vrfSign],
      vrfVerify: [Function: vrfVerify]
    },
    bob: {
      address: [Getter],
      addressRaw: [Getter],
      isLocked: [Getter],
      meta: [Getter],
      publicKey: [Getter],
      type: [Getter],
      decodePkcs8: [Function: decodePkcs8],
      decryptMessage: [Function: decryptMessage],
      derive: [Function: derive],
      encodePkcs8: [Function: encodePkcs8],
      encryptMessage: [Function: encryptMessage],
      lock: [Function: lock],
      setMeta: [Function: setMeta],
      sign: [Function: sign],
      toJson: [Function: toJson],
      unlock: [Function: unlock],
      verify: [Function: verify],
      vrfSign: [Function: vrfSign],
      vrfVerify: [Function: vrfVerify]
    },
    charlie: {
      address: [Getter],
      addressRaw: [Getter],
      isLocked: [Getter],
      meta: [Getter],
      publicKey: [Getter],
      type: [Getter],
      decodePkcs8: [Function: decodePkcs8],
      decryptMessage: [Function: decryptMessage],
      derive: [Function: derive],
      encodePkcs8: [Function: encodePkcs8],
      encryptMessage: [Function: encryptMessage],
      lock: [Function: lock],
      setMeta: [Function: setMeta],
      sign: [Function: sign],
      toJson: [Function: toJson],
      unlock: [Function: unlock],
      verify: [Function: verify],
      vrfSign: [Function: vrfSign],
      vrfVerify: [Function: vrfVerify]
    },
    dave: {
      address: [Getter],
      addressRaw: [Getter],
      isLocked: [Getter],
      meta: [Getter],
      publicKey: [Getter],
      type: [Getter],
      decodePkcs8: [Function: decodePkcs8],
      decryptMessage: [Function: decryptMessage],
      derive: [Function: derive],
      encodePkcs8: [Function: encodePkcs8],
      encryptMessage: [Function: encryptMessage],
      lock: [Function: lock],
      setMeta: [Function: setMeta],
      sign: [Function: sign],
      toJson: [Function: toJson],
      unlock: [Function: unlock],
      verify: [Function: verify],
      vrfSign: [Function: vrfSign],
      vrfVerify: [Function: vrfVerify]
    },
    eve: {
      address: [Getter],
      addressRaw: [Getter],
      isLocked: [Getter],
      meta: [Getter],
      publicKey: [Getter],
      type: [Getter],
      decodePkcs8: [Function: decodePkcs8],
      decryptMessage: [Function: decryptMessage],
      derive: [Function: derive],
      encodePkcs8: [Function: encodePkcs8],
      encryptMessage: [Function: encryptMessage],
      lock: [Function: lock],
      setMeta: [Function: setMeta],
      sign: [Function: sign],
      toJson: [Function: toJson],
      unlock: [Function: unlock],
      verify: [Function: verify],
      vrfSign: [Function: vrfSign],
      vrfVerify: [Function: vrfVerify]
    },
    ferdie: {
      address: [Getter],
      addressRaw: [Getter],
      isLocked: [Getter],
      meta: [Getter],
      publicKey: [Getter],
      type: [Getter],
      decodePkcs8: [Function: decodePkcs8],
      decryptMessage: [Function: decryptMessage],
      derive: [Function: derive],
      encodePkcs8: [Function: encodePkcs8],
      encryptMessage: [Function: encryptMessage],
      lock: [Function: lock],
      setMeta: [Function: setMeta],
      sign: [Function: sign],
      toJson: [Function: toJson],
      unlock: [Function: unlock],
      verify: [Function: verify],
      vrfSign: [Function: vrfSign],
      vrfVerify: [Function: vrfVerify]
    }
  },
  suAccount: {
    address: [Getter],
    addressRaw: [Getter],
    isLocked: [Getter],
    meta: [Getter],
    publicKey: [Getter],
    type: [Getter],
    decodePkcs8: [Function: decodePkcs8],
    decryptMessage: [Function: decryptMessage],
    derive: [Function: derive],
    encodePkcs8: [Function: encodePkcs8],
    encryptMessage: [Function: encryptMessage],
    lock: [Function: lock],
    setMeta: [Function: setMeta],
    sign: [Function: sign],
    toJson: [Function: toJson],
    unlock: [Function: unlock],
    verify: [Function: verify],
    vrfSign: [Function: vrfSign],
    vrfVerify: [Function: vrfVerify]
  },
  suAccountCert: {
    certificate: { encodedBody: [Uint8Array], signature: [Object] },
    pubkey: Uint8Array(32) [
      244, 234, 190, 67, 148,  68, 178,  77,
       44,  19, 233, 17,  18, 144, 112, 163,
       47, 206,  36, 32, 199, 112, 133, 240,
      160,  92, 236, 27,  75,  12,  37,  43
    ],
    secret: Uint8Array(64) [
      160, 214, 167, 134, 222,  75, 174, 204, 246,  13, 217,
      109, 190,  89, 129, 192, 136, 177, 143,  68, 193,  45,
       21,  72, 186, 197,  85, 134,  35, 229, 219,  90, 247,
        9,  15,  51,  45,  82, 110,  69, 247,  51, 142, 214,
       45, 239,  50,  48, 105,   5,  65,  54, 164,  25,  23,
       14,  73,  56, 245, 239,  82,  36,  15, 239
    ]
  },
  mainClusterId: '0x0000000000000000000000000000000000000000000000000000000000000000',
  runtimeContext: <ref *1> RuntimeContext {
    _stackBinaryDownloader: StackBinaryDownloader {
      _context: [Circular *1],
      _logger: [Logger],
      _releases: [Array]
    },
    _devPhases: {},
    verbosity: 1,
    listrRenderer: 'default',
    config: {
      general: [Object],
      directories: [Object],
      stack: [Object],
      testing: [Object],
      networks: [Object],
      accountsConfig: [Object]
    },
    paths: {
      devphase: '/home/kvin/codes/chain/phala/phat-simple-lego/node_modules/@devphase/service',
      templates: '/home/kvin/codes/chain/phala/phat-simple-lego/node_modules/@devphase/service/templates',
      project: '/home/kvin/codes/chain/phala/phat-simple-lego',
      context: '/home/kvin/codes/chain/phala/phat-simple-lego/.devphase',
      artifacts: '/home/kvin/codes/chain/phala/phat-simple-lego/artifacts',
      contracts: '/home/kvin/codes/chain/phala/phat-simple-lego/contracts',
      logs: '/home/kvin/codes/chain/phala/phat-simple-lego/logs',
      currentLog: '/home/kvin/codes/chain/phala/phat-simple-lego/logs/2023-04-24T08:23:19.984Z',
      scripts: '/home/kvin/codes/chain/phala/phat-simple-lego/scripts',
      stacks: '/home/kvin/codes/chain/phala/phat-simple-lego/stacks',
      currentStack: '/home/kvin/codes/chain/phala/phat-simple-lego/stacks/nightly-2023-04-19',
      tests: '/home/kvin/codes/chain/phala/phat-simple-lego/tests',
      typings: '/home/kvin/codes/chain/phala/phat-simple-lego/typings'
    },
    testingConfig: {
      spawnStack: true,
      network: 'local',
      blockTime: 500,
      stackSetupMode: 3
    }
  },
  _apiProvider: WsProvider {},
  _apiOptions: {
    types: {
      Address: 'MultiAddress',
      LookupSource: 'MultiAddress',
      DispatchErrorModule: 'DispatchErrorModuleU8',
      Keys: 'AccountId',
      BridgeChainId: 'u8',
      BridgeEvent: [Object],
      FungibleTransfer: [Object],
      NonFungibleTransfer: [Object],
      GenericTransfer: [Object],
      ResourceId: '[u8; 32]',
      TokenId: 'U256',
      DepositNonce: 'u64',
      ProposalStatus: [Object],
      ProposalVotes: [Object],
      AssetInfo: [Object],
      ProxyType: [Object],
      Sr25519PublicKey: '[u8; 32]',
      MasterPublicKey: 'Sr25519PublicKey',
      WorkerPublicKey: 'Sr25519PublicKey',
      ContractPublicKey: 'Sr25519PublicKey',
      EcdhPublicKey: 'SpCoreSr25519Public',
      MessageOrigin: [Object],
      Attestation: [Object],
      AttestationSgxIas: [Object],
      SenderId: 'MessageOrigin',
      Path: 'Vec<u8>',
      Topic: 'Path',
      Message: [Object],
      SignedMessage: [Object],
      WorkerRegistrationInfo: [Object],
      PoolInfo: [Object],
      WithdrawInfo: [Object],
      WorkerInfo: [Object],
      MinerInfo: [Object],
      Benchmark: [Object],
      MinerState: [Object],
      MinerStats: [Object],
      HeartbeatChallenge: [Object],
      KeyDistribution: [Object],
      GatekeeperLaunch: [Object],
      GatekeeperChange: [Object],
      GatekeeperEvent: [Object],
      NewGatekeeperEvent: [Object],
      DispatchMasterKeyEvent: [Object],
      RandomNumberEvent: [Object],
      TokenomicParameters: [Object],
      TokenomicParams: 'TokenomicParameters',
      U64F64Bits: 'u128',
      UserStakeInfo: [Object],
      ContractId: 'H256',
      ContractQueryHead: [Object],
      CertificateBody: [Object],
      EncryptedData: [Object],
      CommandPayload: [Object],
      InkQueryData: [Object],
      InkQuery: [Object],
      InkQueryError: [Object],
      InkQueryOk: [Object],
      InkResponse: [Object],
      InkMessage: [Object],
      InkCommand: [Object]
    },
    signedExtensions: { CheckMqSequence: {} }
  },
  _eventQueue: EventQueue {
    _api: ApiPromise {
      __phantom: <BN: 0>,
      _call: [Object],
      _consts: [Object],
      _errors: [Object],
      _events: [Object],
      _extrinsicType: 4,
      _isReady: true,
      _query: [Object],
      _runtimeMap: [Object],
      _rx: [Object],
      _rxDecorateMethod: [Function: _rxDecorateMethod],
      _decorateMethod: [Function: toPromiseMethod],
      _options: [Object],
      _type: 'promise',
      _rpcCore: [RpcCore],
      _isConnected: [BehaviorSubject],
      _rpc: [Function],
      _queryMulti: [Function (anonymous)],
      _runtimeChain: [Text],
      _runtimeVersion: [Type [Map]],
      _genesisHash: [Type [Uint8Array]],
      _runtimeMetadata: [Metadata [Map]],
      _extrinsics: [Function],
      _derive: [Object]
    },
    _eventsSubscription: [Function (anonymous)],
    _handlers: {}
  },
  _workerInfo: undefined,
  _systemContracts: {},
  _driverContracts: {}
}

